'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _chromaJs = require('chroma-js');

var _chromaJs2 = _interopRequireDefault(_chromaJs);

var _components = require('../../components');

var _components2 = _interopRequireDefault(_components);

var _ChromeCirclePointer = require('./ChromeCirclePointer');

var _ChromeCirclePointer2 = _interopRequireDefault(_ChromeCirclePointer);

var _ChromeDiscPointer = require('./ChromeDiscPointer');

var _ChromeDiscPointer2 = _interopRequireDefault(_ChromeDiscPointer);

var _ChromeToggleIcon = require('./ChromeToggleIcon');

var _ChromeToggleIcon2 = _interopRequireDefault(_ChromeToggleIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// 0:rgba,1:hsla,2:hex
var Chrome = (_temp = _class = function (_React$Component) {
	_inherits(Chrome, _React$Component);

	function Chrome(props) {
		_classCallCheck(this, Chrome);

		var c = (0, _chromaJs2.default)(props.color, props.colorModel);

		var _this = _possibleConstructorReturn(this, (Chrome.__proto__ || Object.getPrototypeOf(Chrome)).call(this, props));

		_this.handleModelToggle = function () {
			return _this.setState({ inputModel: ++_this.state.inputModel % 3 });
		};

		_this.handleChange = function (v, e) {
			_this.props.onChange(v, e);
			_this.setState({ color: v });
		};

		var color = { css: c.css(), rgba: c.rgba() };
		_this.state = {
			color: color,
			currColor: color,
			inputModel: 0
		};
		return _this;
	}

	_createClass(Chrome, [{
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			var c = (0, _chromaJs2.default)(nextProps.color, nextProps.colorModel);
			var color = { css: c.css(), rgba: c.rgba() };
			this.setState({ color: color });
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _state = this.state,
			    color = _state.color,
			    currColor = _state.currColor,
			    inputModel = _state.inputModel;
			var colors = this.props.colors;


			return _react2.default.createElement(
				_components2.default,
				{ style: styles.root, color: color.rgba, onChange: function onChange(a) {
						return _this2.handleChange(a);
					} },
				_react2.default.createElement(_components.ColorPanel, { style: styles.panel, pointer: _react2.default.createElement(_ChromeCirclePointer2.default, null) }),
				_react2.default.createElement(_components.ColorBar, { style: styles.hueBar, model: 'hsv.h', pointer: _react2.default.createElement(_ChromeDiscPointer2.default, null) }),
				_react2.default.createElement(_components.ColorBar, { style: styles.alphaBar, model: 'alpha', pointer: _react2.default.createElement(_ChromeDiscPointer2.default, null) }),
				_react2.default.createElement(_components.ColorBlock, { style: styles.block, color: color.css }),
				inputModel === 0 ? _react2.default.createElement(
					'div',
					{ style: styles.inputsDiv, 'data-color': '1', key: 'rgb' },
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.input, labelStyle: styles.inputLabel, model: 'rgb.r' }),
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.input, labelStyle: styles.inputLabel, model: 'rgb.g' }),
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.input, labelStyle: styles.inputLabel, model: 'rgb.b' }),
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.input, labelStyle: styles.inputLabel, label: 'A', model: 'alpha' })
				) : inputModel === 1 ? _react2.default.createElement(
					'div',
					{ style: styles.inputsDiv, 'data-color': '1', key: 'hsv' },
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.input, labelStyle: styles.inputLabel, model: 'hsv.h' }),
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.input, labelStyle: styles.inputLabel, model: 'hsv.s', scale: 100 }),
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.input, labelStyle: styles.inputLabel, model: 'hsv.v', scale: 100 }),
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.input, labelStyle: styles.inputLabel, label: 'A', model: 'alpha' })
				) : _react2.default.createElement(
					'div',
					{ style: styles.inputsDiv, 'data-color': '1', key: 'hex' },
					_react2.default.createElement(_components.ColorInput, { inputStyle: styles.hexInput, labelStyle: styles.hexLabel, label: 'HEX', model: 'hex', sharp: true })
				),
				_react2.default.createElement(
					'div',
					{ style: styles.toggle, onClick: this.handleModelToggle },
					_react2.default.createElement(_ChromeToggleIcon2.default, null)
				),
				_react2.default.createElement(
					'div',
					{ 'data-color': '1', style: styles.colors },
					colors.map(function (color) {
						return _react2.default.createElement(_components.ColorBlock, { key: color, color: color, style: styles.card });
					})
				),
				_react2.default.createElement('div', { style: styles.tail }),
				_react2.default.createElement('div', { style: styles.tail2 })
			);
		}
	}]);

	return Chrome;
}(_react2.default.Component), _class.propTypes = {
	color: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.string]),
	colors: _react.PropTypes.array,
	onChange: _react.PropTypes.func,
	colorModel: _react.PropTypes.string
}, _class.defaultProps = {
	color: [255, 0, 0, 1],
	onChange: function onChange() {},
	colors: ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#fffb3b', '#ffc107', '#ff9800', '#ff5722', '#795548', '#9e9e9e', '#607d8b']
}, _temp);


var styles = {
	root: {
		position: 'relative',
		width: 232,
		height: 320,
		boxShadow: 'rgba(0, 0, 0, 0.24) 0px 2px 4px, rgba(0, 0, 0, 0.24) 0px 6px 12px',
		background: '#fff',
		borderRadius: 2,
		fontFamily: 'Consolas'
	},
	panel: {
		height: 125,
		overflow: 'hidden'
	},
	hueBar: {
		position: 'absolute',
		left: 60,
		top: 140,
		width: 150,
		height: 12,
		borderRadius: 2
	},
	alphaBar: {
		position: 'absolute',
		left: 60,
		top: 160,
		width: 150,
		height: 12,
		borderRadius: 2
	},
	block: {
		position: 'absolute',
		left: 18,
		top: 144,
		width: 24,
		height: 24,
		borderRadius: 12
	},
	inputsDiv: {
		position: 'absolute',
		left: 16,
		top: 185,
		fontSize: 0
	},
	input: {
		width: 40,
		height: 22,
		textAlign: 'center',
		border: '1px solid #ccc',
		fontFamily: 'Consolas',
		borderRadius: 2
	},
	inputLabel: {
		position: 'absolute',
		color: '#999',
		left: 15,
		top: 24
	},
	hexLabel: {
		position: 'absolute',
		color: '#999',
		left: 76,
		top: 24
	},
	hexInput: {
		width: 172,
		height: 22,
		textAlign: 'center',
		border: '1px solid #ccc',
		fontFamily: 'Consolas',
		borderRadius: 2
	},
	colors: {
		position: 'absolute',
		bottom: 0,
		padding: '12px 0 0 12px',
		borderTop: '1px solid #ccc',
		marginTop: 9,
		fontSize: 0
	},
	card: {
		display: 'inline-block',
		width: 10,
		height: 10,
		margin: '0 12px 12px 0',
		borderRadius: 2,
		border: '1px solid rgba(0,0,0,0.2)'
	},
	toggle: {
		position: 'absolute',
		left: 203,
		top: 196
	},
	tail: {
		position: 'absolute',
		top: 321,
		left: 13,
		borderWidth: 7,
		borderColor: 'rgba(0,0,0,0.15) transparent transparent transparent',
		borderStyle: 'solid'
	},
	tail2: {
		position: 'absolute',
		top: 320,
		left: 13,
		borderWidth: 7,
		borderColor: '#fff transparent transparent transparent',
		borderStyle: 'solid'
	}
};

exports.default = Chrome;