'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /* 
                   	容器组件，将颜色属性和onChange事件传递给每个子组件，并作为设定颜色和获取颜色的接口 
                   	颜色输入格式：任何合法的颜色格式
                   	颜色输出格式 {
                   	  hsl: { a: 1, h: 0, l: 0.5, s: 1 },
                   	  hex: '#ff0000',
                   	  rgb: { r: 255, g: 0, b: 0, a: 1 },
                   	  hsv: { h: 0, s: 1, v: 1, a: 1 },
                   	  oldHue: 0
                   	}
                   	参考https://github.com/bgrins/TinyColor
                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _chromaJs = require('chroma-js');

var _chromaJs2 = _interopRequireDefault(_chromaJs);

var _padStart = require('../../helpers/padStart');

var _padStart2 = _interopRequireDefault(_padStart);

var _contains = require('../../helpers/contains');

var _contains2 = _interopRequireDefault(_contains);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var formatHex = function formatHex(hexStr) {

	var max = 16777215;
	var min = 0;
	var num = parseInt(hexStr, 16);
	var newValue = num > max ? 'ffffff' : hexStr;
	newValue = num < min ? '0' : newValue;
	return (0, _padStart2.default)(newValue, 6, '0');
};

var format = function format(colors) {
	return colors.map(function (c) {
		return Number(c);
	});
};

/*function colorType (props, propName, componentName) {
    if ( props[propName] && !color.isValid(props[propName])) {
     	return new Error(
       		'Invalid color prop `' + propName + '` supplied to' +
        	' `' + componentName + '`. Validation failed.'
      	);
    }
}*/

var ColorPicker = (_temp = _class = function (_React$Component) {
	_inherits(ColorPicker, _React$Component);

	function ColorPicker(props) {
		_classCallCheck(this, ColorPicker);

		var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, props));

		_this._chroma = (0, _chromaJs2.default)(props.color, props.colorModel);
		_this.state = {
			// data format:[r,g,b] i.e: [0,0,255]
			color: props.color,
			model: 'hsv.h',
			activeModel: props.colorModel
		};
		return _this;
	}

	_createClass(ColorPicker, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			this.componentWillReceiveProps(this.props);
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			nextProps.color && this.formateColor(nextProps.color, nextProps.colorModel);
			if (!(0, _contains2.default)(this.container, document.activeElement)) {
				this.setState({ activeModel: null });
			}
		}
	}, {
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(nextProps, nextState) {
			return true;
		}
	}, {
		key: 'handleChange',
		value: function handleChange(color, model, e) {
			this.setState({ color: color, activeModel: model });
			this.props.onChange(this.formateColor(color, model), e);
		}
	}, {
		key: 'handleModelChange',
		value: function handleModelChange(nextModel, e) {
			this.setState({ model: nextModel });
			this.props.onModelChange(nextModel, e);
		}
	}, {
		key: 'formateColor',
		value: function formateColor(color, model) {
			// keep alpha, because alpha would reset to 1 when chroma set color
			var alpha = model === 'rgba' ? Number(color[3]) : this._chroma.alpha();
			var _chroma = this._chroma = (0, _chromaJs2.default)(color, model).alpha(alpha);
			return {
				rgb: _chroma.rgb(),
				rgba: _chroma.rgba(),
				hsl: _chroma.hsl(),
				hsv: _chroma.hsv(),
				lab: _chroma.lab(),
				lch: _chroma.lch(),
				hcl: _chroma.hcl(),
				cmyk: _chroma.cmyk(),
				css: _chroma.css(),
				hex: _chroma.hex(),
				temperature: _chroma.temperature(),
				a: _chroma.alpha(),
				alpha: _chroma.alpha()
			};
		}
	}, {
		key: 'getChildren',
		value: function getChildren(children) {
			var _this2 = this;

			// 为子组件传入新属性
			var _state = this.state,
			    activeModel = _state.activeModel,
			    model = _state.model,
			    color = _state.color;


			return _react2.default.Children.map(children, function (child) {
				var compName = child.type.displayName;

				if (child.props['data-color']) {
					var divChildren = child.props.children;

					return _react2.default.cloneElement(child, {
						children: _this2.getChildren(divChildren)
					});
				}

				if (compName === 'ColorRadio') {
					return _react2.default.cloneElement(child, {
						checked: _this2.state.model === child.props.model,
						onChange: function onChange(m, e) {
							_this2.handleModelChange(child.props.model, e);
						}
					});
				}

				if (compName === 'ColorBlock') {
					return _react2.default.cloneElement(child, {
						onClick: function onClick(v, e) {
							_this2.handleChange(v, 'hex', e);
							child.props.onChange && child.props.onChange(v, e);
						}
					});
				}

				if (['ColorPanel', 'ColorBar', 'ColorInput', 'ColorRadio'].indexOf(compName) > -1) {
					var _model = child.props.model || _this2.state.model;
					var type = _model.split('.')[0] || 'rgb';
					type = type === 'alpha' ? 'rgba' : type;

					// error!!!!!!!!!!!!!!!!!!!!!!!
					return _react2.default.cloneElement(child, {
						onChange: function onChange(v, e) {
							_this2.handleChange(v, type, e);
							child.props.onChange && child.props.onChange(v, e);
						},
						color: type === activeModel ? _this2.state.color : _this2._chroma.get(type),
						model: _model
					});
				}

				if (child.props['data-user-color']) {

					return _react2.default.cloneElement(child, {
						color: _this2.formateColor(color, activeModel),
						onChange: function onChange(value, type) {
							_this2.handleCustomChange(value, type, e);
						}
					});
				}

				return _react2.default.cloneElement(child);
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			var _props = this.props,
			    children = _props.children,
			    style = _props.style;

			var root = Object.assign({
				position: 'relative'
			}, style);

			return _react2.default.createElement(
				'div',
				{ style: root, ref: function ref(node) {
						_this3.container = node;
					} },
				this.getChildren(children)
			);
		}
	}]);

	return ColorPicker;
}(_react2.default.Component), _class.propTypes = {
	// 监听颜色变化
	onChange: _react.PropTypes.func,
	// 容器样式
	style: _react.PropTypes.object,
	// 默认颜色
	// defaultColor: colorType,
	// 设置颜色
	// color: colorType,
	colorModel: _react.PropTypes.oneOf(['rgb', 'hsl', 'hsv', 'hex', 'rgba'])
}, _class.defaultProps = {
	onChange: function onChange() {},
	onModelChange: function onModelChange() {},
	color: '#ff9966'
}, _temp);
exports.default = ColorPicker;