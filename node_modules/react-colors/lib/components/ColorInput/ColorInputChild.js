'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorInputChild = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /* 颜色属性输入 */

// todo: 添加propTypes和defaultProps
// todo: debug拖动改数功能
// todo: 客制化标签
// todo: 配置小数点位数
// todo: Lab值变化bug
// todo: fix cmyk.k
// 
// todo: 使用pos 0 1 2 3代替 getColor 和 getValue

// 抽离出对象部分

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _NumberInput = require('./NumberInput');

var _NumberInput2 = _interopRequireDefault(_NumberInput);

var _HexInput = require('./HexInput');

var _HexInput2 = _interopRequireDefault(_HexInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColorInputChild = exports.ColorInputChild = (_temp = _class = function (_ref) {
  _inherits(ColorInputChild, _ref);

  function ColorInputChild(props) {
    _classCallCheck(this, ColorInputChild);

    var _this = _possibleConstructorReturn(this, (ColorInputChild.__proto__ || Object.getPrototypeOf(ColorInputChild)).call(this));

    _this.handleChange = function (value, e) {
      var color = _this.props.color;

      var newColor = color;
      var pos = _this.getAttr('pos');
      if (typeof pos === 'number') newColor[pos] = value;else newColor = value;
      _this.props.onChange(newColor, e);
      _this.setState({ value: value });
    };

    _this.state = {
      value: null
    };
    return _this;
  }

  _createClass(ColorInputChild, [{
    key: 'getAttr',
    value: function getAttr(attr) {
      var model = this.props.model;

      var map = { min: 0, max: 1, step: 2, fixed: 3, pos: 4 };
      var attrs = {
        'rgb.r': [0, 255, 1, 0, 0],
        'rgb.g': [0, 255, 1, 0, 1],
        'rgb.b': [0, 255, 1, 0, 2],
        'hsv.h': [0, 360, 1, 0, 0],
        'hsv.s': [0, 1, 0.01, 2, 1],
        'hsv.v': [0, 1, 0.01, 2, 2],
        'lab.l': [0, 100, 1, 0, 0],
        'lab.a': [-128, 127, 1, 0, 1],
        'lab.b': [-128, 127, 1, 0, 2],
        'cmyk.c': [0, 1, 0.01, 2, 0],
        'cmyk.m': [0, 1, 0.01, 2, 1],
        'cmyk.y': [0, 1, 0.01, 2, 2],
        'cmyk.k': [0, 1, 0.01, 2, 3],
        'alpha': [0, 1, 0.01, 2, 3],
        'hex': [0, 16777215, 1, null, null]
      };
      return this.props[attr] || attrs[model][map[attr]];
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.componentWillReceiveProps(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var pos = this.getAttr('pos');
      this.setState({
        value: typeof pos === 'number' ? nextProps.color[this.getAttr('pos')] : nextProps.color
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          model = _props.model,
          fixed = _props.fixed,
          scale = _props.scale,
          sharp = _props.sharp,
          placeholder = _props.placeholder;

      if (model === 'hex') {
        return _react2.default.createElement(_HexInput2.default, {
          step: this.getAttr('step'),
          style: style,
          sharp: sharp,
          value: this.state.value,
          onChange: this.handleChange,
          placeholder: placeholder
        });
      }

      if (!fixed) {
        fixed = parseInt(this.getAttr('fixed') - Math.log10(scale));
        fixed < 0 ? 0 : fixed;
      }

      return _react2.default.createElement(_NumberInput2.default, {
        min: this.getAttr('min'),
        max: this.getAttr('max'),
        step: this.getAttr('step'),
        fixed: fixed,
        style: style,
        value: this.state.value,
        scale: scale,
        onChange: this.handleChange,
        placeholder: placeholder
      });
    }
  }]);

  return ColorInputChild;
}(_react.PureComponent || _react.Component), _class.propTypes = {
  color: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.string]),
  model: _react.PropTypes.oneOf(['rgb.r', 'rgb.g', 'rgb.b', 'hsv.h', 'hsv.s', 'hsv.v', 'lab.l', 'lab.a', 'lab.b', 'cmyk.c', 'cmyk.m', 'cmyk.y', 'cmyk.k', 'alpha', 'hex']),
  value: _react.PropTypes.number,
  fixed: _react.PropTypes.number,
  step: _react.PropTypes.number,
  min: _react.PropTypes.number,
  max: _react.PropTypes.number,
  scale: _react.PropTypes.number
}, _class.defaultProps = {
  scale: 1
}, _temp);
exports.default = ColorInputChild;

/*
  handleDrag = (e) => {
    if (this.props.dragLabel) {
      const newValue = Math.round(this.props.value + e.movementX)
      if (newValue >= 0 && newValue <= this.props.dragMax) {
        this.props.onChange({ [this.props.label]: newValue }, e)
      }
    }
  }

  handleMouseDown = (e) => {
    if (this.props.dragLabel) {
      e.preventDefault()
      this.handleDrag(e)
      window.addEventListener('mousemove', this.handleDrag)
      window.addEventListener('mouseup', this.handleMouseUp)
    }
  }

  handleMouseUp = () => {
    this.unbindEventListeners()
  }

  unbindEventListeners = () => {
    window.removeEventListener('mousemove', this.handleDrag)
    window.removeEventListener('mouseup', this.handleMouseUp)
  }*/