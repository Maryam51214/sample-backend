'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NumberInput = (_temp = _class = function (_React$Component) {
	_inherits(NumberInput, _React$Component);

	function NumberInput(props) {
		_classCallCheck(this, NumberInput);

		var _this = _possibleConstructorReturn(this, (NumberInput.__proto__ || Object.getPrototypeOf(NumberInput)).call(this, props));

		_initialiseProps.call(_this);

		var newValue = Number((Number(props.value) * props.scale).toFixed(props.fixed));
		_this.state = {
			value: newValue,
			blurValue: null
		};
		return _this;
	}

	_createClass(NumberInput, [{
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			var input = this.input;
			var newValue = Number((Number(nextProps.value) * nextProps.scale).toFixed(nextProps.fixed));
			if (newValue !== this.state.value) {
				if (input === document.activeElement) {
					this.setState({ blurValue: newValue });
				} else {
					this.setState({ value: newValue });
				}
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    style = _props.style,
			    placeholder = _props.placeholder;

			return _react2.default.createElement('input', {
				type: 'text',
				ref: function ref(node) {
					return _this2.input = node;
				},
				value: this.state.value,
				style: style,
				onBlur: this.handleBlur,
				onChange: function onChange(e) {
					return _this2.handleChange(e.target.value, e);
				},
				onKeyDown: this.handleKeyDown,
				placeholder: placeholder
			});
		}
	}]);

	return NumberInput;
}(_react2.default.Component), _class.propTypes = {
	value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
	min: _react.PropTypes.number,
	max: _react.PropTypes.number,
	step: _react.PropTypes.number,
	fixed: _react.PropTypes.number,
	scale: _react.PropTypes.number
}, _class.defaultProps = {
	step: 1,
	fixed: 0,
	scale: 1
}, _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.handleBlur = function (e) {
		var blurValue = _this3.state.blurValue;
		if (blurValue || blurValue == 0) {
			_this3.setState({
				value: blurValue,
				blurValue: null
			});
		}
	};

	this.handleChange = function (newValue, e, call) {
		var _props2 = _this3.props,
		    min = _props2.min,
		    max = _props2.max;


		if (!isNaN(Number(newValue))) {
			var outValue = Number(newValue);
			outValue = outValue > max ? max : outValue;
			outValue = outValue < min ? min : outValue;
			_this3.props.onChange(outValue, e);
		}
		if (!isNaN(Number(newValue)) || !newValue) _this3.setState({ value: newValue }, call);
	};

	this.handleKeyDown = function (e) {
		var _props3 = _this3.props,
		    step = _props3.step,
		    fixed = _props3.fixed;

		var num = Number(e.target.value);
		// up
		if (e.keyCode === 38) {
			e.preventDefault();
			_this3.handleChange((num + step).toFixed(fixed), e, function () {
				return _this3.input.select();
			});
		}

		// Down
		if (e.keyCode === 40) {
			e.preventDefault();
			_this3.handleChange((num - step).toFixed(fixed), e, function () {
				return _this3.input.select();
			});
		}
	};
}, _temp);
exports.default = NumberInput;